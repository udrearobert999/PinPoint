@using Domain.Entities
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model List<Application.Dto.PinDto>
@inject SignInManager<User> SignInManager

@{
    Layout = "_NavLayout";
}

@functions {

    public string ByteArrayToBase64(byte[] byteArray)
    {
        return Convert.ToBase64String(byteArray);
    }

}

<link rel="stylesheet" href="~/css/pages/login.css" asp-append-version="true"/>
<link rel="stylesheet" href="~/css/components/button.css" asp-append-version="true"/>

<div class="container">
    <div class="row">
        @if (Model.Any() && SignInManager.IsSignedIn(User))
        {
            foreach (var pin in Model)
            {
                <div class="col-md-4">
                    <div class="pin-item mb-4">
                        <img src="data:image/png;base64,@ByteArrayToBase64(pin.Picture)" alt="@pin.Title" class="pin-image" id="@pin.Id">
                        <h5 class="pin-title">@pin.Title</h5>
                    </div>
                </div>
            }
        }
        else if (ViewBag.SearchAttempted == true)
        {
            <div class="col-md-12 justify-content-center text-center">
                <div class="alert alert-info justify-content-center text-center">
                    <strong>No pins found!</strong> Your search did not return any results.
                </div>
            </div>
        }
        else if (!SignInManager.IsSignedIn(User))
        {
            <div class="col-md-12 justify-content-center text-center">
                <div class="alert alert-info justify-content-center text-center">
                    <strong>No pins available!</strong> Please login first.
                </div>
            </div>
        }
        else
        {
            <div class="col-md-12 justify-content-center text-center">
                <div class="alert alert-info justify-content-center text-center">
                    <strong>No pins available!</strong> There are currently no pins to display.
                </div>
            </div>
        }
    </div>
</div>

<section class="modal hidden">
    <span class="material-icons btn-close">close</span>
    <div class="modal-content">
        <div class="picture-container">
            <img id="picture" src="" alt="Selected Picture">
        </div>
        <div class="comments-container">
            <div class="comments-list">
            </div>
            <form id="comment-form" method="POST">
                <div class="input-wrapper">
                    <input class="input" name="CommentMessage" aria-required="true" placeholder="Comment..."/>
                    <input type="hidden" name="Id" id="pinId"/>
                </div>
            </form>
        </div>
    </div>
</section>

<div class="overlay hidden"></div>

<style>
    body {
        font-size: 16px;
    }

    .pin-item {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border-radius: 6px;
        padding: 16px;
        background-color: #ffffff;
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    
    .input-wrapper {
        width: 100%;
    }
    
    .pin-item:hover {
        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);
        transition: box-shadow 0.3s ease;
    }

    .pin-image {
        max-width: 100%;
        border-radius: 4px;
        margin-bottom: 8px;
    }

    .pin-title {
        margin-top: 8px;
        text-align: center;
    }

    .modal {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 0.4rem;
        width: 90rem;
        padding: 2rem;
        max-height: 55rem;
        position: fixed;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        background-color: white;
        border: 1px solid #ddd;
        border-radius: var(--radius);
        z-index: 2;
    }

    .modal-content {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        border: none;
        width: 100%;
        height: 100%;
    }

    .btn-close {
        position: absolute;
        top: 15px;
        right: 15px;
        z-index: 1;
    }

    .overlay {
        position: fixed;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(3px);
        z-index: 1;
    }

    .hidden { display: none; }

    .picture-container,
    .comments-container {
        flex: 1;
        padding: 1rem;
    }

    #picture {
        object-fit: contain;
        height: 100%;
        width: 100%;
    }

    .comments-container {
        display: flex;
        padding: 3rem;
        flex-direction: column;
        justify-content: space-between;
        position: relative;
    }

    .comments-list {
        flex: 1;
        overflow-y: auto;
    }

    .input-container { height: 50px; }

    #comment-input {
        width: 100%;
        padding: .5rem;
        box-sizing: border-box;
        margin-top: 1.5rem
    }
    
    .comment {
        display: flex;
        margin-bottom: 10px;
    }

        .comment img {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            margin-right: 10px;
        }

    .comment-content {
        display: flex;
        flex-direction: column;
    }

    .comment-name {
        font-weight: bold;
    }

    .comment-message {
        margin-top: 5px;
    }
</style>

<script>
    const modal = document.querySelector(".modal");
    const overlay = document.querySelector(".overlay");
    const closeModalBtn = document.querySelector(".btn-close");
    const commentForm = document.getElementById('comment-form');
    const commentsList = document.querySelector(".comments-list");
    
    closeModalBtn.addEventListener("click", closeModal);
    overlay.addEventListener("click", closeModal);

    // Loop through each element and add a click event listener
    const pinImages = document.querySelectorAll('.pin-image');
    pinImages.forEach(pinImage => {
        pinImage.addEventListener('click', async function () {
            await openModal(this);
        });
    });
    
    commentForm.addEventListener("submit", async function (e) {
        e.preventDefault();

        let formData = new FormData(this);

        try {
            const response = await fetch('/Pins/AddComment', {
                method: this.method,
                body: formData,
                headers: {
                    "Accept": "application/json"
                }
            });
            
            if (response.ok) {
                addCommentToList(await response.json(), commentsList);
            } else {
                console.error("Error submitting comment:", response.statusText);
            }
        } catch (error) {
            console.error("There was an error:", error);
        }
    });

    async function openModal(element) {
        modal.classList.remove("hidden");
        overlay.classList.remove("hidden");
        document.getElementById('picture').src = element.src;
        const pinId = element.id;
        document.getElementById('pinId').value = pinId;

        const comments = await fetchComments(pinId);
        renderComments(comments);
    };

    function closeModal() {
        modal.classList.add("hidden");
        overlay.classList.add("hidden");
    };

    async function fetchComments(pinId) {
        const response = await fetch(`/Pins/GetComments?pinId=${pinId}`);
        const comments = await response.json();
        return comments;
    }
    
    function addCommentToList(comment, commentsList) {
        const commentDiv = document.createElement('div');
        commentDiv.className = 'comment';

        const profileImg = document.createElement('img');
        profileImg.src = `data:image/png;base64,${comment.profilePicture}`;

        const commentContentDiv = document.createElement('div');
        commentContentDiv.className = 'comment-content';

        const nameDiv = document.createElement('div');
        nameDiv.className = 'comment-name';
        nameDiv.textContent = comment.userName;

        const messageDiv = document.createElement('div');
        messageDiv.className = 'comment-message';
        messageDiv.textContent = comment.commentMessage;

        commentContentDiv.appendChild(nameDiv);
        commentContentDiv.appendChild(messageDiv);

        commentDiv.appendChild(profileImg);
        commentDiv.appendChild(commentContentDiv);
        
        commentsList.appendChild(commentDiv);

        return commentDiv;
    }

    function renderComments(comments) {
        while (commentsList.firstChild) {
            commentsList.removeChild(commentsList.firstChild);
        }
        
        comments.forEach(comment => {
            if (comment.commentMessage && comment.userName) {
                addCommentToList(comment, commentsList)
            }
        });
    }
</script>